require 'benchmark'

array = (1..1000000).map { rand*100000 }

Benchmark.bm(30) do |x|
  x.report("Math.sqrt(n)") { array.each { |n| Math.sqrt(n) } }
  x.report("n ** 0.5") { array.each { |n| n ** 0.5 } }
  
  x.report("Math.sqrt(123948293.0)") { 1000000.times { Math.sqrt(123948293.0) } }
  x.report("Math.sqrt(123948293)") { 1000000.times { Math.sqrt(123948293) } }
  x.report("123948293 ** 0.5") { 1000000.times { 123948293 ** 0.5 } }
  x.report("123948293.0 ** 0.5") { 1000000.times { 123948293.0 ** 0.5 } }

  x.report("Math.sqrt(1234123451295127.0)") { 1000000.times { Math.sqrt(1234123451295127.0) } }
  x.report("Math.sqrt(1234123451295127)") { 1000000.times { Math.sqrt(1234123451295127) } }
  x.report("1234123451295127 ** 0.5") { 1000000.times { 1234123451295127 ** 0.5 } }
  x.report("1234123451295127.0 ** 0.5") { 1000000.times { 1234123451295127.0 ** 0.5 } }
end

# Math.sqrt(n) is faster than n ** 0.5 as long as n is converted into a float.
#                                      user     system      total        real
# Math.sqrt(n)                     0.240000   0.010000   0.250000 (  0.250612)
# n ** 0.5                         0.350000   0.000000   0.350000 (  0.349724)
# Math.sqrt(123948293.0)           0.190000   0.000000   0.190000 (  0.198141)
# Math.sqrt(123948293)             0.780000   0.000000   0.780000 (  0.780274)
# 123948293 ** 0.5                 0.360000   0.000000   0.360000 (  0.352095)
# 123948293.0 ** 0.5               0.390000   0.000000   0.390000 (  0.393692)
# Math.sqrt(1234123451295127.0)    0.230000   0.000000   0.230000 (  0.231836)
# Math.sqrt(1234123451295127)      0.850000   0.000000   0.850000 (  0.851122)
# 1234123451295127 ** 0.5          0.390000   0.000000   0.390000 (  0.394220)
# 1234123451295127.0 ** 0.5        0.320000   0.000000   0.320000 (  0.322660)
